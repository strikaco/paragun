# Where to get logs from
# Generic UDP listener, no TLS
input(type="imudp" port="514"
      ruleset="writeRemoteData")
# TCP listener; should be TLS
input(type="imtcp" port="10514"
      ruleset="writeRemoteData")
# RELP listener; should be TLS
input(type="imrelp" port="20514"
      ruleset="writeRemoteData")

      
# Define how data should look once logged to file
template(name="ParagunJSON" type="list") {
  constant(value="{")
    constant(value="\"time_reported\":\"")       property(name="timereported" dateFormat="rfc3339")
    constant(value="\",\"time_consumed\":\"")    property(name="timegenerated" dateFormat="rfc3339")
    constant(value="\",\"consumer\":\"")         property(name="$myhostname" format="json")
    constant(value="\",\"host\":\"")             property(name="hostname" format="json")
    constant(value="\",\"host_dns\":\"")         property(name="fromhost" format="json")
    constant(value="\",\"host_ip\":\"")          property(name="fromhost-ip" format="json")
    constant(value="\",\"process\":\"")          property(name="programname" format="json")
    constant(value="\",\"facility\":\"")         property(name="syslogfacility-text" format="json")
    constant(value="\",\"severity\":\"")         property(name="syslogseverity-text" format="json")
    constant(value="\",\"msg\":\"")              property(name="$!msg_short" format="json")
    constant(value="\",\"token\":\"")            property(name="$!token_ext" format="json")
  constant(value="\"}\n")
}


# Create a template for the filename
template(name="ParagunTemplate" type="string"
    # Since we have multiple rsyslogs running in parallel, we must include the
    # name of the host that received each set of logs in the filename.
    # Otherwise, receivers will overwrite each other's logfiles when it's all 
    # backed up to a shared bucket.
    string="/var/log/received/%$year%/%$month%/%$day%/%$!token_ext%/%$year%_%$month%_%$day%_%$!token_ext%_%$myhostname%_%$/gid%.log"
)


# Where to store/forward these logs
ruleset(name="writeRemoteData"
        queue.type="linkedlist"
        queue.size="750000"
        queue.dequeueBatchSize="4096"
        queue.workerThreads="4"
        queue.workerThreadMinimumMessages="100000"
        queue.saveOnShutdown="on"
        queue.filename="q_writeRemoteData"
        queue.highwatermark="500000"
        queue.lowwatermark="250000"
        queue.maxdiskspace="1g"
       ) {
    # Check for token; reject if none found.
    #
    # At this point we cannot verify the validity of the token-- 
    # but storage is cheap whereas downstream message processing is not, so
    # we'll store anything that pretends to be valid and will filter out
    # ineligible messages later.
    #
    # Token MUST be in UUID4 format, followed by the @P4R4GN suffix.
    set $!token_raw = re_extract($msg,"([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[89aAbB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}@P4R4GN)",0,1,"");
    if ($!token_raw == "") then { stop }

    # Remove token from message and get rid of any leading/trailing whitespace
    set $!msg_short = ltrim(rtrim(replace($msg, $!token_raw, "")));
    
    # Strip app label from token
    set $!token_ext = tolower(replace($!token_raw, '@P4R4GN', ""));

    # Store locally
    action(
        type="omfile" 
        dynaFile="ParagunTemplate"
        ioBufferSize="64k"
        flushOnTXEnd="off"
        asyncWriting="on"
        template="ParagunJSON"
    )
    # Forward to parsers
    #action(type="omfwd"
    #    target="127.0.0.1" 
    #    port="514" 
    #    protocol="tcp"
    #    action.resumeRetryCount="100"
    #    queue.type="linkedList" 
    #    queue.size="20000"
    #)
}