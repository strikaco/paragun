# Where to get logs from
input(type="imudp" port="514"
      ruleset="writeRemoteData")
input(type="imtcp" port="10514"
      ruleset="writeRemoteData")
input(type="imrelp" port="20514"
      ruleset="writeRemoteData")
      
# Define how data should look once logged to file
template(name="ParagunJSON" type="list") {
  constant(value="{")
    constant(value="\"timestamp\":\"")
      property(name="timereported" dateFormat="rfc3339")
    constant(value="\",\"msg\":\"")
      property(name="rawmsg" format="json")
    constant(value="\",\"token\":\"")
      property(name="rawmsg" regex.type="ERE" regex.expression=".*([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[89aAbB][a-fA-F0-9]{3}-[a-fA-F0-9]{12})@P4R4GN.*" regex.submatch="1" format="json")
  constant(value="\"}\n")
}

# Where to store/forward these logs
ruleset(name="writeRemoteData"
        queue.type="linkedlist"
        queue.size="750000"
        queue.dequeueBatchSize="4096"
        queue.workerThreads="4"
        queue.workerThreadMinimumMessages="100000"
        #queue.saveOnShutdown="on"
        #queue.filename="q_writeRemoteData"
        #queue.highwatermark="500000"
        #queue.lowwatermark="250000"
        #queue.maxdiskspace="1g"
       ) {
    # Check for token; reject if none found.
    #
    # At this point we cannot verify the validity of the token-- 
    # but storage is cheap whereas downstream message processing is not, so
    # we'll store anything that pretends to be valid and will filter out
    # ineligible messages later.
    #
    # Token MUST be in UUID4 format, followed by the @P4R4GN suffix.
    :rawmsg, !ereregex, ".*([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[89aAbB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}\@P4R4GN).*" stop
    
    # Store locally
    action(
        type="omfile" 
        dynaFile="RemoteDynaFileTemplate"
        ioBufferSize="64k"
        flushOnTXEnd="off"
        asyncWriting="on"
        template="ParagunJSON"
    )
    # Forward to parsers
    #action(type="omfwd"
    #    target="127.0.0.1" 
    #    port="514" 
    #    protocol="tcp"
    #    action.resumeRetryCount="100"
    #    queue.type="linkedList" 
    #    queue.size="20000"
    #)
}