# Where to get logs from
# Generic UDP listener, no TLS
input(type="imudp" port="514"
      ruleset="writeRemoteData")
# TCP listener; should be TLS
input(type="imtcp" port="10514"
      ruleset="writeRemoteData")
# RELP listener; should be TLS
input(type="imrelp" port="20514"
      ruleset="writeRemoteData")
      
# Get lookup table of valid tokens
lookup_table(name="token_valid"
    file="/var/log/paragun/lookups/token_valid.json"
)

# Define how data should look once logged to file
template(name="ParagunJSON" type="list") {
  constant(value="{")
    constant(value="\"time_reported\":\"")       property(name="timereported" dateFormat="rfc3339")
    constant(value="\",\"time_consumed\":\"")    property(name="timegenerated" dateFormat="rfc3339")
    constant(value="\",\"consumer\":\"")         property(name="$myhostname" format="json")
    constant(value="\",\"host\":\"")             property(name="$!hostname_clean" format="json")
    constant(value="\",\"host_dns\":\"")         property(name="$!fromhost_clean" format="json")
    constant(value="\",\"host_ip\":\"")          property(name="$!fromhost-ip_clean" format="json")
    constant(value="\",\"process\":\"")          property(name="$!programname_clean" format="json")
    constant(value="\",\"facility\":\"")         property(name="$!facility-text_clean" format="json")
    constant(value="\",\"severity\":\"")         property(name="$!severity-text_clean" format="json")
    constant(value="\",\"msg\":\"")              property(name="$!msg_short" format="json")
    constant(value="\",\"msg_bytes\":\"")        property(name="$!msg_bytes" format="json")
    constant(value="\",\"token\":\"")            property(name="$!token_ext" format="json")
  constant(value="\"}\n")
}

# Create a template for the filename
template(name="ParagunTemplate" type="string"
    # Since we have multiple rsyslogs running in parallel, we must include the
    # name of the host that received each set of logs in the filename.
    # Otherwise, receivers will overwrite each other's logfiles when it's all 
    # backed up to a shared bucket.
    # string="/var/log/paragun/%$year%/%$month%/%$day%/%$!token_ext%/%$year%_%$month%_%$day%_%$!token_ext%_%$myhostname%_%$/gid%.log"
    string="/var/log/paragun/%$!token_ext%_%$myhostname%.log"
)

# Create a template for the metrics data
template(name="ParagunMetric" type="string"
    string="%$!token_ext%\t\t%$!fromhost-ip_clean%\t\t%$!programname_clean%\t\t1\t\t%$!msg_bytes%\n"
)

# Where to store/forward these logs
ruleset(name="writeRemoteData"
        queue.type="linkedlist"
        queue.size="750000"
        queue.dequeueBatchSize="4096"
        queue.workerThreads="4"
        queue.workerThreadMinimumMessages="100000"
        queue.saveOnShutdown="on"
        queue.filename="q_writeRemoteData"
        queue.highwatermark="500000"
        queue.lowwatermark="250000"
        queue.maxdiskspace="1g"
       ) {
       
    # Check for token; reject if none found.
    # Token MUST be in UUID4 format, followed by a predefined suffix.
    set $!token_raw = re_extract($msg,"([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[89aAbB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}@P4R4GN)",0,1,"");
    if ($!token_raw == "") then { stop }

    # Strip app label from token
    set $!token_ext = tolower(replace($!token_raw, '@P4R4GN', ""));
    
    # Check whether token is valid
    set $!token_valid = lookup("token_valid", $!token_ext);
    # TODO: Fail open on nomatch?
    if ($!token_valid <> "1") then { stop }
    
    # Remove token from message and get rid of any leading/trailing whitespace
    set $!msg_short = tolower(ltrim(rtrim(replace($msg, $!token_raw, ""))));
    
    # Clean up rest of attributes
    set $!hostname_clean = ltrim(rtrim(tolower($hostname)));
    set $!fromhost_clean = ltrim(rtrim(tolower($fromhost)));
    set $!fromhost-ip_clean = ltrim(rtrim(tolower($fromhost-ip)));
    set $!programname_clean = replace(ltrim(rtrim(tolower($programname))), " ", "-");
    set $!facility-text_clean = ltrim(rtrim(tolower($syslogfacility-text)));
    set $!severity-text_clean = ltrim(rtrim(tolower($syslogseverity-text)));
    set $!msg_bytes = strlen($msg);

    # Store locally
    action(
        type="omfile" 
        dynaFile="ParagunTemplate"
        ioBufferSize="64k"
        flushOnTXEnd="off"
        asyncWriting="on"
        template="ParagunJSON"
    )
    
    # Record metric
    action(
        type="omfile" 
        File="/var/log/paragun/metrics/index"
        ioBufferSize="64k"
        flushOnTXEnd="off"
        asyncWriting="on"
        template="ParagunMetric"
    )
    
    stop
}