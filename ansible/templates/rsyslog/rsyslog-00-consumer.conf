# Where to get logs from
# Generic UDP listener, no TLS
input(type="imudp" port="514" name="udp"
      ruleset="pipeline-in"
      threads="2"
      timeRequery="8" batchSize="128")
      
# TCP listener; should be TLS
input(type="imtcp" port="10514" name="tcp"
      ruleset="pipeline-in"
      threads="3")
      
# RELP listener; should be TLS
input(type="imrelp" port="20514" name="relp"
      ruleset="pipeline-in"
      threads="3")
      
# Build lookup table of valid tokens
lookup_table(name="tokens"
    file="/var/log/paragun/lookups/tokens.json"
)

# Define how data should look once logged to file
template(name="ParagunJSON" type="list") {
  constant(value="{")
    constant(value="\"timestamp\":\"")           property(name="timereported" dateFormat="rfc3339")
    constant(value="\",\"timestamp_rec\":\"")    property(name="timegenerated" dateFormat="rfc3339")
    constant(value="\",\"node\":\"")             property(name="$myhostname" format="json")
    constant(value="\",\"protocol\":\"")         property(name="inputname" format="json")
    constant(value="\",\"host\":\"")             property(name="$!hostname_clean" format="json")
    constant(value="\",\"host_dns\":\"")         property(name="$!fromhost_clean" format="json")
    constant(value="\",\"host_ip\":\"")          property(name="$!fromhost-ip_clean" format="json")
    constant(value="\",\"process\":\"")          property(name="$!programname_clean" format="json")
    constant(value="\",\"facility\":\"")         property(name="$!facility-text_clean" format="json")
    constant(value="\",\"severity\":\"")         property(name="$!severity-text_clean" format="json")
    constant(value="\",\"msg\":\"")              property(name="$!msg_short" format="json")
    constant(value="\",\"msg_bytes\":\"")        property(name="$!msg_bytes" format="json")
    constant(value="\",\"token\":\"")            property(name="$!token_ext" format="json")
    constant(value="\",\"data\":")               property(name="$!data" caseconversion="lower")
  constant(value="}\n")
}

# Create a template for the filename
template(name="ParagunTemplate" type="string"
    # Since we have multiple rsyslogs running in parallel, we must include the
    # name of the host that received each set of logs in the filename.
    # Otherwise, receivers will overwrite each other's logfiles when it's all 
    # backed up to a shared bucket.
    # string="/var/log/paragun/%$year%/%$month%/%$day%/%$!token_ext%/%$year%_%$month%_%$day%_%$!token_ext%_%$myhostname%_%$/gid%.log"
    string="/var/log/paragun/%$!token_ext%_%$myhostname%.log"
)

# Create a template for the metrics data
template(name="ParagunMetric" type="string"
    string="%$!token_ext%\t\t%$!fromhost-ip_clean%\t\t%$!programname_clean%\t\t1\t\t%$!msg_bytes%\n"
)

template(name="ParagunEventMetric" type="string"
    string="%$!token_ext%(#)%$!fromhost-ip_clean%(#)%$!programname_clean%"
)

# Where to store/forward these logs
ruleset(name="pipeline-in"
        queue.type="linkedlist"
        queue.size="200000"
        queue.dequeueBatchSize="20000"
        queue.workerThreads="2"
        queue.workerThreadMinimumMessages="50000"
        queue.saveOnShutdown="on"
        queue.filename="q_pipeline_in"
        queue.highwatermark="175000"
        queue.lowwatermark="150000"
        queue.maxdiskspace="1g"
       ) {
       
    # Check for token; reject if none found.
    # Token MUST be in UUID4 format, followed by a predefined suffix.
    set $.token_raw = re_extract($msg, "([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[89aAbB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}@P4R4GN)",0,1,"");
    if ($.token_raw == "") then {
      # Keep track of how many events are being dropped per IP
      set $.inc = dyn_inc("event-rejects", $fromhost-ip);
      stop 
    }

    # Strip app label from token
    set $!token_ext = tolower(replace($.token_raw, '@P4R4GN', ""));
    
    # Check whether token is valid
    set $.token_valid = lookup("tokens", $!token_ext);
    # TODO: Fail open on nomatch?
    if ($.token_valid <> "1") then { 
      # Keep track of how many events are being dropped per token
      set $.inc = dyn_inc("token-rejects", $!token_ext);
      stop 
    }
    
    # Remove token from message and get rid of any leading/trailing whitespace
    set $!msg_short = ltrim(rtrim(replace($msg, $.token_raw, "")));
    
    # Clean up rest of attributes
    set $!hostname_clean = ltrim(rtrim(tolower($hostname)));
    set $!fromhost_clean = ltrim(rtrim(tolower($fromhost)));
    set $!fromhost-ip_clean = ltrim(rtrim(tolower($fromhost-ip)));
    set $!programname_clean = replace(ltrim(rtrim(tolower($programname))), " ", "-");
    set $!facility-text_clean = ltrim(rtrim(tolower($syslogfacility-text)));
    set $!severity-text_clean = ltrim(rtrim(tolower($syslogseverity-text)));
    set $!msg_bytes = strlen($msg);
    
    # Pass to external parser
    set $!data = "{}";
    action(
      name="rsysparser"
      type="mmexternal" 
      binary="/opt/paragun/rsysparse.py" 
      interface.input="fulljson"
      #output="/var/log/paragun/parser.log"
    )

    # Store locally
    action(
        name="pipeline-out"
        type="omfile" 
        dynaFile="ParagunTemplate"
        ioBufferSize="64k"
        flushOnTXEnd="off"
        asyncWriting="on"
        template="ParagunJSON"
    )
    
    # Record metrics
    # ex. set $.inc = dyn_inc("msgs_per_edge_relay", $!trusted!core!relay);
    set $.bucket_name = exec_template("ParagunEventMetric");
    set $.inc = dyn_inc("event-metrics", $.bucket_name);
    
    action(
        name="data-metrics-out"
        type="omfile" 
        File="/var/log/paragun/metrics/index"
        ioBufferSize="64k"
        flushOnTXEnd="off"
        asyncWriting="on"
        template="ParagunMetric"
    )
    
    stop
}